// Generated by @reono/client - DO NOT EDIT
import { createClient, type ClientRequestOptions, type CreateClientOptions } from '@reono/client/runtime';

// Route type definitions
// GET /health
export type GET_health_Route = {
  params: never;
  body: never;
  response: any;
};
// GET *
export type GET_*_Route = {
  params: never;
  body: never;
  response: any;
};

// Union type of all valid paths
export type ValidPaths = '/health' | '*';

// Path-specific parameter requirements
export type PathParams<T extends ValidPaths> = T extends keyof PathParamMap 
  ? PathParamMap[T] 
  : never;

interface PathParamMap {
  // No paths with parameters
}

// Generated client interface
export interface GeneratedApiClient {
  get<T = any>(path: '/health', options?: ClientRequestOptions): Promise<T>;
  get<T = any>(path: '*', options?: ClientRequestOptions): Promise<T>;
}

// Create the typed client
function createTypedClient(options: CreateClientOptions = {}): GeneratedApiClient {
  const client = createClient({ baseUrl: 'http://localhost:8082', ...options });
  
  return {
    get: <T = any>(path: '/health', options?: ClientRequestOptions) => 
      client.get<T>(path, options),
    get: <T = any>(path: '*', options?: ClientRequestOptions) => 
      client.get<T>(path, options)
  };
}

// Export the client instance
export const api = createTypedClient();

// Export the client factory for custom configuration
export { createTypedClient as createApi };
