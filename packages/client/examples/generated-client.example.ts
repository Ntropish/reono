// Example of what the plugin would generate
// Generated by @reono/client - DO NOT EDIT
import { createClient, type ClientRequestOptions, type CreateClientOptions } from '@reono/client/runtime';

// Route type definitions
// GET /api/v1/health
export type GET_api_v1_health_Route = {
  params: never;
  body: never;
  response: { status: string };
};

// GET /api/v1/users
export type GET_api_v1_users_Route = {
  params: never;
  body: never;
  response: { users: any[]; total: number };
};

// POST /api/v1/users
export type POST_api_v1_users_Route = {
  params: never;
  body: { name: string; email: string; role?: 'user' | 'admin' };
  response: { id: string; name: string; email: string; role: 'user' | 'admin' };
};

// GET /api/v1/users/:id
export type GET_api_v1_users_id_Route = {
  params: { id: string };
  body: never;
  response: { id: string; name: string; email: string; role: 'user' | 'admin' };
};

// PUT /api/v1/users/:id
export type PUT_api_v1_users_id_Route = {
  params: { id: string };
  body: Partial<{ name: string; email: string; role: 'user' | 'admin' }>;
  response: { id: string; name: string; email: string; role: 'user' | 'admin' };
};

// DELETE /api/v1/users/:id
export type DELETE_api_v1_users_id_Route = {
  params: { id: string };
  body: never;
  response: void;
};

// GET /api/v1/organizations/:orgId/users/:userId
export type GET_api_v1_organizations_orgId_users_userId_Route = {
  params: { orgId: string; userId: string };
  body: never;
  response: { orgId: string; userId: string };
};

// Union type of all valid paths
export type ValidPaths = 
  | '/api/v1/health'
  | '/api/v1/users'
  | '/api/v1/users/:id'
  | '/api/v1/organizations/:orgId/users/:userId';

// Path-specific parameter requirements
export type PathParams<T extends ValidPaths> = T extends keyof PathParamMap 
  ? PathParamMap[T] 
  : never;

interface PathParamMap {
  '/api/v1/users/:id': { id: string | number };
  '/api/v1/organizations/:orgId/users/:userId': { orgId: string | number; userId: string | number };
}

// Enhanced request options that enforce params when required
export type SafeRequestOptions<TPath extends ValidPaths> = 
  TPath extends keyof PathParamMap
    ? ClientRequestOptions & { params: PathParamMap[TPath] }
    : ClientRequestOptions;

// Generated client interface with full type safety
export interface GeneratedApiClient {
  // Health endpoint - no params required
  get<T = { status: string }>(path: '/api/v1/health', options?: ClientRequestOptions): Promise<T>;
  
  // Users endpoints
  get<T = { users: any[]; total: number }>(path: '/api/v1/users', options?: ClientRequestOptions): Promise<T>;
  post<T = any>(path: '/api/v1/users', options?: ClientRequestOptions): Promise<T>;
  
  // User by ID - params required
  get<T = any>(path: '/api/v1/users/:id', options: SafeRequestOptions<'/api/v1/users/:id'>): Promise<T>;
  put<T = any>(path: '/api/v1/users/:id', options: SafeRequestOptions<'/api/v1/users/:id'>): Promise<T>;
  delete<T = void>(path: '/api/v1/users/:id', options: SafeRequestOptions<'/api/v1/users/:id'>): Promise<T>;
  
  // Organization user - multiple params required
  get<T = any>(path: '/api/v1/organizations/:orgId/users/:userId', options: SafeRequestOptions<'/api/v1/organizations/:orgId/users/:userId'>): Promise<T>;
}

// Create the typed client
function createTypedClient(options: CreateClientOptions = {}): GeneratedApiClient {
  const client = createClient({ baseUrl: 'http://localhost:3000', ...options });
  
  return {
    get: <T = any>(path: ValidPaths, options?: ClientRequestOptions) => 
      client.get<T>(path, options),
    post: <T = any>(path: ValidPaths, options?: ClientRequestOptions) => 
      client.post<T>(path, options),
    put: <T = any>(path: ValidPaths, options?: ClientRequestOptions) => 
      client.put<T>(path, options),
    delete: <T = any>(path: ValidPaths, options?: ClientRequestOptions) => 
      client.delete<T>(path, options),
  } as GeneratedApiClient;
}

// Export the client instance
export const api = createTypedClient();

// Export the client factory for custom configuration
export { createTypedClient as createApi };
