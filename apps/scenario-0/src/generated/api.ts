// Generated by @reono/client - DO NOT EDIT
import { createClient, type ClientRequestOptions, type CreateClientOptions } from '@reono/client/runtime';

// Route type definitions grouped by HTTP method
export interface RouteDefinitions {
  GET: {
    "/users": {
      params: never;
      body: never;
      response: Array<{ id: number; name: string }>;
    },
    "/users/:userId": {
      params: { userId: string | number };
      body: never;
      response: { id: number; name: string };
    },
    "/": {
      params: never;
      body: never;
      response: Array<{ id: number; name: string }>;
    },
    "/:userId": {
      params: { userId: string | number };
      body: never;
      response: { id: number; name: string };
    }
  },
  PUT: {
    "/users/:userId": {
      params: { userId: string | number };
      body: any;
      response: any;
    },
    "/:userId": {
      params: { userId: string | number };
      body: any;
      response: any;
    }
  },
  DELETE: {
    "/users/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    },
    "/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    }
  },
  POST: {
    "/users": {
      params: never;
      body: any;
      response: any;
    },
    "/": {
      params: never;
      body: any;
      response: any;
    }
  },
  PATCH: {
    "/users/:userId": {
      params: { userId: string | number };
      body: any;
      response: any;
    },
    "/:userId": {
      params: { userId: string | number };
      body: any;
      response: any;
    }
  }
}

// Method-specific path types
export type GETPaths = '/users' | '/users/:userId' | '/' | '/:userId';
export type PUTPaths = '/users/:userId' | '/:userId';
export type DELETEPaths = '/users/:userId' | '/:userId';
export type POSTPaths = '/users' | '/';
export type PATCHPaths = '/users/:userId' | '/:userId';

// Union type of all valid paths
export type ValidPaths = '/users' | '/users/:userId' | '/users/:userId' | '/users/:userId' | '/users' | '/users/:userId' | '/' | '/:userId' | '/:userId' | '/:userId' | '/' | '/:userId';

export type PathParams<T extends ValidPaths> = T extends keyof PathParamMap 
  ? PathParamMap[T] 
  : never;

interface PathParamMap {
  '/users/:userId': { userId: string | number };
  '/:userId': { userId: string | number }
}

// Generated client interface
export interface GeneratedApiClient {
  get(path: '/users', options?: ClientRequestOptions): Promise<RouteDefinitions["GET"]["/users"]["response"]>;
  get(path: '/users/:userId', options: ClientRequestOptions & { params: RouteDefinitions["GET"]["/users/:userId"]["params"] }): Promise<RouteDefinitions["GET"]["/users/:userId"]["response"]>;
  get(path: '/', options?: ClientRequestOptions): Promise<RouteDefinitions["GET"]["/"]["response"]>;
  get(path: '/:userId', options: ClientRequestOptions & { params: RouteDefinitions["GET"]["/:userId"]["params"] }): Promise<RouteDefinitions["GET"]["/:userId"]["response"]>;
  put(path: '/users/:userId', options: ClientRequestOptions & { params: RouteDefinitions["PUT"]["/users/:userId"]["params"] } & { body: RouteDefinitions["PUT"]["/users/:userId"]["body"] }): Promise<RouteDefinitions["PUT"]["/users/:userId"]["response"]>;
  put(path: '/:userId', options: ClientRequestOptions & { params: RouteDefinitions["PUT"]["/:userId"]["params"] } & { body: RouteDefinitions["PUT"]["/:userId"]["body"] }): Promise<RouteDefinitions["PUT"]["/:userId"]["response"]>;
  delete(path: '/users/:userId', options: ClientRequestOptions & { params: RouteDefinitions["DELETE"]["/users/:userId"]["params"] }): Promise<RouteDefinitions["DELETE"]["/users/:userId"]["response"]>;
  delete(path: '/:userId', options: ClientRequestOptions & { params: RouteDefinitions["DELETE"]["/:userId"]["params"] }): Promise<RouteDefinitions["DELETE"]["/:userId"]["response"]>;
  post(path: '/users', options: ClientRequestOptions & { body: RouteDefinitions["POST"]["/users"]["body"] }): Promise<RouteDefinitions["POST"]["/users"]["response"]>;
  post(path: '/', options: ClientRequestOptions & { body: RouteDefinitions["POST"]["/"]["body"] }): Promise<RouteDefinitions["POST"]["/"]["response"]>;
  patch(path: '/users/:userId', options: ClientRequestOptions & { params: RouteDefinitions["PATCH"]["/users/:userId"]["params"] } & { body: RouteDefinitions["PATCH"]["/users/:userId"]["body"] }): Promise<RouteDefinitions["PATCH"]["/users/:userId"]["response"]>;
  patch(path: '/:userId', options: ClientRequestOptions & { params: RouteDefinitions["PATCH"]["/:userId"]["params"] } & { body: RouteDefinitions["PATCH"]["/:userId"]["body"] }): Promise<RouteDefinitions["PATCH"]["/:userId"]["response"]>;
}

// Create the typed client
function createTypedClient(options: CreateClientOptions = {}): GeneratedApiClient {
  const client = createClient({ baseUrl: 'http://localhost:8082', ...options });
  
  return {
    get: (path: string, options?: ClientRequestOptions) => {
      switch (path) {
      case '/users': return client.get(path, options) as Promise<RouteDefinitions["GET"]["/users"]["response"]>;
      case '/users/:userId': return client.get(path, options) as Promise<RouteDefinitions["GET"]["/users/:userId"]["response"]>;
      case '/': return client.get(path, options) as Promise<RouteDefinitions["GET"]["/"]["response"]>;
      case '/:userId': return client.get(path, options) as Promise<RouteDefinitions["GET"]["/:userId"]["response"]>;
        default: throw new Error(`Invalid path for GET: ${path}`);
      }
    },
    put: (path: string, options?: ClientRequestOptions) => {
      switch (path) {
      case '/users/:userId': return client.put(path, options) as Promise<RouteDefinitions["PUT"]["/users/:userId"]["response"]>;
      case '/:userId': return client.put(path, options) as Promise<RouteDefinitions["PUT"]["/:userId"]["response"]>;
        default: throw new Error(`Invalid path for PUT: ${path}`);
      }
    },
    delete: (path: string, options?: ClientRequestOptions) => {
      switch (path) {
      case '/users/:userId': return client.delete(path, options) as Promise<RouteDefinitions["DELETE"]["/users/:userId"]["response"]>;
      case '/:userId': return client.delete(path, options) as Promise<RouteDefinitions["DELETE"]["/:userId"]["response"]>;
        default: throw new Error(`Invalid path for DELETE: ${path}`);
      }
    },
    post: (path: string, options?: ClientRequestOptions) => {
      switch (path) {
      case '/users': return client.post(path, options) as Promise<RouteDefinitions["POST"]["/users"]["response"]>;
      case '/': return client.post(path, options) as Promise<RouteDefinitions["POST"]["/"]["response"]>;
        default: throw new Error(`Invalid path for POST: ${path}`);
      }
    },
    patch: (path: string, options?: ClientRequestOptions) => {
      switch (path) {
      case '/users/:userId': return client.patch(path, options) as Promise<RouteDefinitions["PATCH"]["/users/:userId"]["response"]>;
      case '/:userId': return client.patch(path, options) as Promise<RouteDefinitions["PATCH"]["/:userId"]["response"]>;
        default: throw new Error(`Invalid path for PATCH: ${path}`);
      }
    }
  };
}

// Export the client instance
export const api = createTypedClient();

// Export the client factory for custom configuration
export { createTypedClient as createApi };
