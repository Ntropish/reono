// Generated by @reono/client - DO NOT EDIT
import { createClient, type ClientRequestOptions, type CreateClientOptions } from '@reono/client/runtime';



// Route type definitions grouped by HTTP method
export interface RouteDefinitions {
  GET: {
    "/health": {
      params: never;
      body: never;
      response: { status: string; timestamp: any; version: string; service: string };
    },
    "/api/v2/*": {
      params: never;
      body: never;
      response: { message: string; availableVersions: Array<any>; currentVersion: string; upgradeInfo: string; v2Features: Array<any> };
    },
    "/v2/*": {
      params: never;
      body: never;
      response: { message: string; availableVersions: Array<any>; currentVersion: string; upgradeInfo: string; v2Features: Array<any> };
    },
    "/*": {
      params: never;
      body: never;
      response: { message: string; availableVersions: Array<any>; currentVersion: string; upgradeInfo: string; v2Features: Array<any> };
    },
    "/docs": {
      params: never;
      body: never;
      response: { message: string; versions: { v1: string; v2: string }; interactive: string; examples: string };
    },
    "/docs/v1": {
      params: never;
      body: never;
      response: { title: string; description: string; baseUrl: string; authentication: string; rateLimit: string; endpoints: { tenant: string; users: string; analytics: string; billing: string } };
    },
    "/": {
      params: never;
      body: never;
      response: { message: string; versions: { v1: string; v2: string }; interactive: string; examples: string };
    },
    "/v1": {
      params: never;
      body: never;
      response: { title: string; description: string; baseUrl: string; authentication: string; rateLimit: string; endpoints: { tenant: string; users: string; analytics: string; billing: string } };
    },
    "/api/v1/tenant/:tenantId/users": {
      params: { tenantId: string | number };
      body: never;
      response: { id: number; name: string; [key: string]: any };
    },
    "/api/v1/tenant/:tenantId/users/:userId": {
      params: { tenantId: string | number; userId: string | number };
      body: never;
      response: { id: number; name: string; [key: string]: any };
    },
    "/api/v1": {
      params: never;
      body: never;
      response: any;
    },
    "/api/v1/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/tenant/:tenantId/info": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/tenant/:tenantId/usage": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/tenant/:tenantId/analytics": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/tenant/:tenantId/analytics/advanced": {
      params: { tenantId: string | number };
      body: never;
      response: { tenantId: any; advancedMetrics: { customEvents: any; conversionRate: any; customerLifetimeValue: any; churnRate: any; detailedBreakdown: { byGeography: { US: number; EU: number; APAC: number }; byDevice: { mobile: number; desktop: number; tablet: number }; bySource: { organic: number; paid: number; referral: number } } }; subscription: string };
    },
    "/api/v1/tenant/:tenantId/analytics/export": {
      params: { tenantId: string | number };
      body: never;
      response: { message: string; tenantId: any; exportId: string; estimatedCompletion: any; downloadUrl: any; format: string; subscription: string };
    },
    "/api/v1/tenant/:tenantId/billing/usage": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/tenant/:tenantId/billing/invoices": {
      params: { tenantId: string | number };
      body: never;
      response: { tenantId: any; invoices: any; total: any };
    },
    "/api/v1/info": {
      params: never;
      body: never;
      response: any;
    },
    "/api/v1/usage": {
      params: never;
      body: never;
      response: any;
    },
    "/api/v1/users": {
      params: never;
      body: never;
      response: { users: any; total: any; tenant: any };
    },
    "/api/v1/users/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/analytics": {
      params: never;
      body: never;
      response: any;
    },
    "/api/v1/analytics/advanced": {
      params: never;
      body: never;
      response: { tenantId: any; advancedMetrics: { customEvents: any; conversionRate: any; customerLifetimeValue: any; churnRate: any; detailedBreakdown: { byGeography: { US: number; EU: number; APAC: number }; byDevice: { mobile: number; desktop: number; tablet: number }; bySource: { organic: number; paid: number; referral: number } } }; subscription: string };
    },
    "/api/v1/analytics/export": {
      params: never;
      body: never;
      response: { message: string; tenantId: any; exportId: string; estimatedCompletion: any; downloadUrl: any; format: string; subscription: string };
    },
    "/api/v1/advanced": {
      params: never;
      body: never;
      response: { tenantId: any; advancedMetrics: { customEvents: any; conversionRate: any; customerLifetimeValue: any; churnRate: any; detailedBreakdown: { byGeography: { US: number; EU: number; APAC: number }; byDevice: { mobile: number; desktop: number; tablet: number }; bySource: { organic: number; paid: number; referral: number } } }; subscription: string };
    },
    "/api/v1/export": {
      params: never;
      body: never;
      response: { message: string; tenantId: any; exportId: string; estimatedCompletion: any; downloadUrl: any; format: string; subscription: string };
    },
    "/api/v1/billing/usage": {
      params: never;
      body: never;
      response: any;
    },
    "/api/v1/billing/invoices": {
      params: never;
      body: never;
      response: { tenantId: any; invoices: any; total: any };
    },
    "/api/v1/invoices": {
      params: never;
      body: never;
      response: { tenantId: any; invoices: any; total: any };
    },
    "/api/v1/tenant/:tenantId/billing": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/content/articles": {
      params: never;
      body: never;
      response: any;
    },
    "/api/v1/content/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/api/v1/content/images": {
      params: never;
      body: never;
      response: any;
    },
    "/api/v1/articles": {
      params: never;
      body: never;
      response: any;
    },
    "/api/v1/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/api/v1/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/api/v1/images": {
      params: never;
      body: never;
      response: any;
    },
    "/api/v1/tenant/:tenantId/analytics/enterprise": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/tenant/:tenantId/analytics/usage": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/enterprise": {
      params: never;
      body: never;
      response: any;
    },
    "/v1/tenant/:tenantId/info": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/v1/tenant/:tenantId/usage": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/v1/tenant/:tenantId/users": {
      params: { tenantId: string | number };
      body: never;
      response: { users: any; total: any; tenant: any };
    },
    "/v1/tenant/:tenantId/users/:userId": {
      params: { tenantId: string | number; userId: string | number };
      body: never;
      response: any;
    },
    "/v1/tenant/:tenantId/analytics": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/v1/tenant/:tenantId/analytics/advanced": {
      params: { tenantId: string | number };
      body: never;
      response: { tenantId: any; advancedMetrics: { customEvents: any; conversionRate: any; customerLifetimeValue: any; churnRate: any; detailedBreakdown: { byGeography: { US: number; EU: number; APAC: number }; byDevice: { mobile: number; desktop: number; tablet: number }; bySource: { organic: number; paid: number; referral: number } } }; subscription: string };
    },
    "/v1/tenant/:tenantId/analytics/export": {
      params: { tenantId: string | number };
      body: never;
      response: { message: string; tenantId: any; exportId: string; estimatedCompletion: any; downloadUrl: any; format: string; subscription: string };
    },
    "/v1/tenant/:tenantId/billing/usage": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/v1/tenant/:tenantId/billing/invoices": {
      params: { tenantId: string | number };
      body: never;
      response: { tenantId: any; invoices: any; total: any };
    },
    "/v1/info": {
      params: never;
      body: never;
      response: any;
    },
    "/v1/usage": {
      params: never;
      body: never;
      response: any;
    },
    "/v1/users": {
      params: never;
      body: never;
      response: { users: any; total: any; tenant: any };
    },
    "/v1/users/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    },
    "/v1/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    },
    "/v1/analytics": {
      params: never;
      body: never;
      response: any;
    },
    "/v1/analytics/advanced": {
      params: never;
      body: never;
      response: { tenantId: any; advancedMetrics: { customEvents: any; conversionRate: any; customerLifetimeValue: any; churnRate: any; detailedBreakdown: { byGeography: { US: number; EU: number; APAC: number }; byDevice: { mobile: number; desktop: number; tablet: number }; bySource: { organic: number; paid: number; referral: number } } }; subscription: string };
    },
    "/v1/analytics/export": {
      params: never;
      body: never;
      response: { message: string; tenantId: any; exportId: string; estimatedCompletion: any; downloadUrl: any; format: string; subscription: string };
    },
    "/v1/advanced": {
      params: never;
      body: never;
      response: { tenantId: any; advancedMetrics: { customEvents: any; conversionRate: any; customerLifetimeValue: any; churnRate: any; detailedBreakdown: { byGeography: { US: number; EU: number; APAC: number }; byDevice: { mobile: number; desktop: number; tablet: number }; bySource: { organic: number; paid: number; referral: number } } }; subscription: string };
    },
    "/v1/export": {
      params: never;
      body: never;
      response: { message: string; tenantId: any; exportId: string; estimatedCompletion: any; downloadUrl: any; format: string; subscription: string };
    },
    "/v1/billing/usage": {
      params: never;
      body: never;
      response: any;
    },
    "/v1/billing/invoices": {
      params: never;
      body: never;
      response: { tenantId: any; invoices: any; total: any };
    },
    "/v1/invoices": {
      params: never;
      body: never;
      response: { tenantId: any; invoices: any; total: any };
    },
    "/v1/tenant/:tenantId/analytics/enterprise": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/v1/tenant/:tenantId/analytics/usage": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/v1/enterprise": {
      params: never;
      body: never;
      response: any;
    },
    "/v1/tenant/:tenantId/billing": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/v1/content/articles": {
      params: never;
      body: never;
      response: any;
    },
    "/v1/content/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/v1/content/images": {
      params: never;
      body: never;
      response: any;
    },
    "/v1/articles": {
      params: never;
      body: never;
      response: any;
    },
    "/v1/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/v1/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/v1/images": {
      params: never;
      body: never;
      response: any;
    },
    "/tenant/:tenantId/info": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/tenant/:tenantId/usage": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/tenant/:tenantId/users": {
      params: { tenantId: string | number };
      body: never;
      response: { users: any; total: any; tenant: any };
    },
    "/tenant/:tenantId/users/:userId": {
      params: { tenantId: string | number; userId: string | number };
      body: never;
      response: any;
    },
    "/tenant/:tenantId/analytics": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/tenant/:tenantId/analytics/advanced": {
      params: { tenantId: string | number };
      body: never;
      response: { tenantId: any; advancedMetrics: { customEvents: any; conversionRate: any; customerLifetimeValue: any; churnRate: any; detailedBreakdown: { byGeography: { US: number; EU: number; APAC: number }; byDevice: { mobile: number; desktop: number; tablet: number }; bySource: { organic: number; paid: number; referral: number } } }; subscription: string };
    },
    "/tenant/:tenantId/analytics/export": {
      params: { tenantId: string | number };
      body: never;
      response: { message: string; tenantId: any; exportId: string; estimatedCompletion: any; downloadUrl: any; format: string; subscription: string };
    },
    "/tenant/:tenantId/billing/usage": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/tenant/:tenantId/billing/invoices": {
      params: { tenantId: string | number };
      body: never;
      response: { tenantId: any; invoices: any; total: any };
    },
    "/info": {
      params: never;
      body: never;
      response: any;
    },
    "/usage": {
      params: never;
      body: never;
      response: any;
    },
    "/users": {
      params: never;
      body: never;
      response: { users: any; total: any; tenant: any };
    },
    "/users/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    },
    "/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    },
    "/analytics": {
      params: never;
      body: never;
      response: any;
    },
    "/analytics/advanced": {
      params: never;
      body: never;
      response: { tenantId: any; advancedMetrics: { customEvents: any; conversionRate: any; customerLifetimeValue: any; churnRate: any; detailedBreakdown: { byGeography: { US: number; EU: number; APAC: number }; byDevice: { mobile: number; desktop: number; tablet: number }; bySource: { organic: number; paid: number; referral: number } } }; subscription: string };
    },
    "/analytics/export": {
      params: never;
      body: never;
      response: { message: string; tenantId: any; exportId: string; estimatedCompletion: any; downloadUrl: any; format: string; subscription: string };
    },
    "/advanced": {
      params: never;
      body: never;
      response: { tenantId: any; advancedMetrics: { customEvents: any; conversionRate: any; customerLifetimeValue: any; churnRate: any; detailedBreakdown: { byGeography: { US: number; EU: number; APAC: number }; byDevice: { mobile: number; desktop: number; tablet: number }; bySource: { organic: number; paid: number; referral: number } } }; subscription: string };
    },
    "/export": {
      params: never;
      body: never;
      response: { message: string; tenantId: any; exportId: string; estimatedCompletion: any; downloadUrl: any; format: string; subscription: string };
    },
    "/billing/usage": {
      params: never;
      body: never;
      response: any;
    },
    "/billing/invoices": {
      params: never;
      body: never;
      response: { tenantId: any; invoices: any; total: any };
    },
    "/invoices": {
      params: never;
      body: never;
      response: { tenantId: any; invoices: any; total: any };
    },
    "/tenant/:tenantId/analytics/enterprise": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/tenant/:tenantId/analytics/usage": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/enterprise": {
      params: never;
      body: never;
      response: any;
    },
    "/tenant/:tenantId/billing": {
      params: { tenantId: string | number };
      body: never;
      response: any;
    },
    "/content/articles": {
      params: never;
      body: never;
      response: any;
    },
    "/content/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/content/images": {
      params: never;
      body: never;
      response: any;
    },
    "/articles": {
      params: never;
      body: never;
      response: any;
    },
    "/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/images": {
      params: never;
      body: never;
      response: any;
    }
  },
  PUT: {
    "/api/v1/tenant/:tenantId/users/:userId": {
      params: { tenantId: string | number; userId: string | number };
      body: any;
      response: any;
    },
    "/api/v1/:userId": {
      params: { userId: string | number };
      body: any;
      response: any;
    },
    "/api/v1/tenant/:tenantId/settings": {
      params: { tenantId: string | number };
      body: any;
      response: { message: string; tenant: any; updatedBy: any; updates: any; timestamp: any };
    },
    "/api/v1/settings": {
      params: never;
      body: any;
      response: { message: string; tenant: any; updatedBy: any; updates: any; timestamp: any };
    },
    "/api/v1/content/articles/:id": {
      params: { id: string | number };
      body: any;
      response: any;
    },
    "/api/v1/articles/:id": {
      params: { id: string | number };
      body: any;
      response: any;
    },
    "/api/v1/:id": {
      params: { id: string | number };
      body: any;
      response: any;
    },
    "/v1/tenant/:tenantId/settings": {
      params: { tenantId: string | number };
      body: any;
      response: { message: string; tenant: any; updatedBy: any; updates: any; timestamp: any };
    },
    "/v1/settings": {
      params: never;
      body: any;
      response: { message: string; tenant: any; updatedBy: any; updates: any; timestamp: any };
    },
    "/v1/tenant/:tenantId/users/:userId": {
      params: { tenantId: string | number; userId: string | number };
      body: any;
      response: any;
    },
    "/v1/:userId": {
      params: { userId: string | number };
      body: any;
      response: any;
    },
    "/v1/content/articles/:id": {
      params: { id: string | number };
      body: any;
      response: any;
    },
    "/v1/articles/:id": {
      params: { id: string | number };
      body: any;
      response: any;
    },
    "/v1/:id": {
      params: { id: string | number };
      body: any;
      response: any;
    },
    "/tenant/:tenantId/settings": {
      params: { tenantId: string | number };
      body: any;
      response: { message: string; tenant: any; updatedBy: any; updates: any; timestamp: any };
    },
    "/settings": {
      params: never;
      body: any;
      response: { message: string; tenant: any; updatedBy: any; updates: any; timestamp: any };
    },
    "/tenant/:tenantId/users/:userId": {
      params: { tenantId: string | number; userId: string | number };
      body: any;
      response: any;
    },
    "/:userId": {
      params: { userId: string | number };
      body: any;
      response: any;
    },
    "/content/articles/:id": {
      params: { id: string | number };
      body: any;
      response: any;
    },
    "/articles/:id": {
      params: { id: string | number };
      body: any;
      response: any;
    },
    "/:id": {
      params: { id: string | number };
      body: any;
      response: any;
    }
  },
  POST: {
    "/api/v1/tenant/:tenantId/users": {
      params: { tenantId: string | number };
      body: any;
      response: { id: number; name: string; [key: string]: any };
    },
    "/api/v1": {
      params: never;
      body: any;
      response: any;
    },
    "/api/v1/tenant/:tenantId/billing/upgrade": {
      params: { tenantId: string | number };
      body: any;
      response: { message: string; tenantId: any; currentTier: any; targetTier: any; estimatedActivation: any; initiatedBy: any; upgradeId: string };
    },
    "/api/v1/users": {
      params: never;
      body: any;
      response: { message: string; user: any; createdBy: any };
    },
    "/api/v1/billing/upgrade": {
      params: never;
      body: any;
      response: { message: string; tenantId: any; currentTier: any; targetTier: any; estimatedActivation: any; initiatedBy: any; upgradeId: string };
    },
    "/api/v1/upgrade": {
      params: never;
      body: any;
      response: { message: string; tenantId: any; currentTier: any; targetTier: any; estimatedActivation: any; initiatedBy: any; upgradeId: string };
    },
    "/api/v1/tenant/:tenantId/billing/cancel": {
      params: { tenantId: string | number };
      body: any;
      response: any;
    },
    "/api/v1/cancel": {
      params: never;
      body: any;
      response: any;
    },
    "/api/v1/content/articles": {
      params: never;
      body: any;
      response: any;
    },
    "/api/v1/content/images": {
      params: never;
      body: any;
      response: any;
    },
    "/api/v1/articles": {
      params: never;
      body: any;
      response: any;
    },
    "/api/v1/images": {
      params: never;
      body: any;
      response: any;
    },
    "/api/v1/tenant/:tenantId/analytics/export": {
      params: { tenantId: string | number };
      body: any;
      response: any;
    },
    "/api/v1/export": {
      params: never;
      body: any;
      response: any;
    },
    "/v1/tenant/:tenantId/users": {
      params: { tenantId: string | number };
      body: any;
      response: { message: string; user: any; createdBy: any };
    },
    "/v1/tenant/:tenantId/billing/upgrade": {
      params: { tenantId: string | number };
      body: any;
      response: { message: string; tenantId: any; currentTier: any; targetTier: any; estimatedActivation: any; initiatedBy: any; upgradeId: string };
    },
    "/v1/users": {
      params: never;
      body: any;
      response: { message: string; user: any; createdBy: any };
    },
    "/v1": {
      params: never;
      body: any;
      response: { message: string; user: any; createdBy: any };
    },
    "/v1/billing/upgrade": {
      params: never;
      body: any;
      response: { message: string; tenantId: any; currentTier: any; targetTier: any; estimatedActivation: any; initiatedBy: any; upgradeId: string };
    },
    "/v1/upgrade": {
      params: never;
      body: any;
      response: { message: string; tenantId: any; currentTier: any; targetTier: any; estimatedActivation: any; initiatedBy: any; upgradeId: string };
    },
    "/v1/tenant/:tenantId/analytics/export": {
      params: { tenantId: string | number };
      body: any;
      response: any;
    },
    "/v1/export": {
      params: never;
      body: any;
      response: any;
    },
    "/v1/tenant/:tenantId/billing/cancel": {
      params: { tenantId: string | number };
      body: any;
      response: any;
    },
    "/v1/cancel": {
      params: never;
      body: any;
      response: any;
    },
    "/v1/content/articles": {
      params: never;
      body: any;
      response: any;
    },
    "/v1/content/images": {
      params: never;
      body: any;
      response: any;
    },
    "/v1/articles": {
      params: never;
      body: any;
      response: any;
    },
    "/v1/images": {
      params: never;
      body: any;
      response: any;
    },
    "/tenant/:tenantId/users": {
      params: { tenantId: string | number };
      body: any;
      response: { message: string; user: any; createdBy: any };
    },
    "/tenant/:tenantId/billing/upgrade": {
      params: { tenantId: string | number };
      body: any;
      response: { message: string; tenantId: any; currentTier: any; targetTier: any; estimatedActivation: any; initiatedBy: any; upgradeId: string };
    },
    "/users": {
      params: never;
      body: any;
      response: { message: string; user: any; createdBy: any };
    },
    "/": {
      params: never;
      body: any;
      response: { message: string; user: any; createdBy: any };
    },
    "/billing/upgrade": {
      params: never;
      body: any;
      response: { message: string; tenantId: any; currentTier: any; targetTier: any; estimatedActivation: any; initiatedBy: any; upgradeId: string };
    },
    "/upgrade": {
      params: never;
      body: any;
      response: { message: string; tenantId: any; currentTier: any; targetTier: any; estimatedActivation: any; initiatedBy: any; upgradeId: string };
    },
    "/tenant/:tenantId/analytics/export": {
      params: { tenantId: string | number };
      body: any;
      response: any;
    },
    "/export": {
      params: never;
      body: any;
      response: any;
    },
    "/tenant/:tenantId/billing/cancel": {
      params: { tenantId: string | number };
      body: any;
      response: any;
    },
    "/cancel": {
      params: never;
      body: any;
      response: any;
    },
    "/content/articles": {
      params: never;
      body: any;
      response: any;
    },
    "/content/images": {
      params: never;
      body: any;
      response: any;
    },
    "/articles": {
      params: never;
      body: any;
      response: any;
    },
    "/images": {
      params: never;
      body: any;
      response: any;
    }
  },
  DELETE: {
    "/api/v1/tenant/:tenantId/users/:userId": {
      params: { tenantId: string | number; userId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    },
    "/api/v1/content/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/api/v1/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/api/v1/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/v1/tenant/:tenantId/users/:userId": {
      params: { tenantId: string | number; userId: string | number };
      body: never;
      response: any;
    },
    "/v1/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    },
    "/v1/content/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/v1/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/v1/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/tenant/:tenantId/users/:userId": {
      params: { tenantId: string | number; userId: string | number };
      body: never;
      response: any;
    },
    "/:userId": {
      params: { userId: string | number };
      body: never;
      response: any;
    },
    "/content/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/articles/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    },
    "/:id": {
      params: { id: string | number };
      body: never;
      response: any;
    }
  }
}

// Method-specific path types
export type GETPaths = '/health' | '/api/v2/*' | '/v2/*' | '/*' | '/docs' | '/docs/v1' | '/' | '/v1' | '/api/v1/tenant/:tenantId/users' | '/api/v1/tenant/:tenantId/users/:userId' | '/api/v1' | '/api/v1/:userId' | '/api/v1/tenant/:tenantId/info' | '/api/v1/tenant/:tenantId/usage' | '/api/v1/tenant/:tenantId/analytics' | '/api/v1/tenant/:tenantId/analytics/advanced' | '/api/v1/tenant/:tenantId/analytics/export' | '/api/v1/tenant/:tenantId/billing/usage' | '/api/v1/tenant/:tenantId/billing/invoices' | '/api/v1/info' | '/api/v1/usage' | '/api/v1/users' | '/api/v1/users/:userId' | '/api/v1/analytics' | '/api/v1/analytics/advanced' | '/api/v1/analytics/export' | '/api/v1/advanced' | '/api/v1/export' | '/api/v1/billing/usage' | '/api/v1/billing/invoices' | '/api/v1/invoices' | '/api/v1/tenant/:tenantId/billing' | '/api/v1/content/articles' | '/api/v1/content/articles/:id' | '/api/v1/content/images' | '/api/v1/articles' | '/api/v1/articles/:id' | '/api/v1/:id' | '/api/v1/images' | '/api/v1/tenant/:tenantId/analytics/enterprise' | '/api/v1/tenant/:tenantId/analytics/usage' | '/api/v1/enterprise' | '/v1/tenant/:tenantId/info' | '/v1/tenant/:tenantId/usage' | '/v1/tenant/:tenantId/users' | '/v1/tenant/:tenantId/users/:userId' | '/v1/tenant/:tenantId/analytics' | '/v1/tenant/:tenantId/analytics/advanced' | '/v1/tenant/:tenantId/analytics/export' | '/v1/tenant/:tenantId/billing/usage' | '/v1/tenant/:tenantId/billing/invoices' | '/v1/info' | '/v1/usage' | '/v1/users' | '/v1/users/:userId' | '/v1/:userId' | '/v1/analytics' | '/v1/analytics/advanced' | '/v1/analytics/export' | '/v1/advanced' | '/v1/export' | '/v1/billing/usage' | '/v1/billing/invoices' | '/v1/invoices' | '/v1/tenant/:tenantId/analytics/enterprise' | '/v1/tenant/:tenantId/analytics/usage' | '/v1/enterprise' | '/v1/tenant/:tenantId/billing' | '/v1/content/articles' | '/v1/content/articles/:id' | '/v1/content/images' | '/v1/articles' | '/v1/articles/:id' | '/v1/:id' | '/v1/images' | '/tenant/:tenantId/info' | '/tenant/:tenantId/usage' | '/tenant/:tenantId/users' | '/tenant/:tenantId/users/:userId' | '/tenant/:tenantId/analytics' | '/tenant/:tenantId/analytics/advanced' | '/tenant/:tenantId/analytics/export' | '/tenant/:tenantId/billing/usage' | '/tenant/:tenantId/billing/invoices' | '/info' | '/usage' | '/users' | '/users/:userId' | '/:userId' | '/analytics' | '/analytics/advanced' | '/analytics/export' | '/advanced' | '/export' | '/billing/usage' | '/billing/invoices' | '/invoices' | '/tenant/:tenantId/analytics/enterprise' | '/tenant/:tenantId/analytics/usage' | '/enterprise' | '/tenant/:tenantId/billing' | '/content/articles' | '/content/articles/:id' | '/content/images' | '/articles' | '/articles/:id' | '/:id' | '/images';
export type PUTPaths = '/api/v1/tenant/:tenantId/users/:userId' | '/api/v1/:userId' | '/api/v1/tenant/:tenantId/settings' | '/api/v1/settings' | '/api/v1/content/articles/:id' | '/api/v1/articles/:id' | '/api/v1/:id' | '/v1/tenant/:tenantId/settings' | '/v1/settings' | '/v1/tenant/:tenantId/users/:userId' | '/v1/:userId' | '/v1/content/articles/:id' | '/v1/articles/:id' | '/v1/:id' | '/tenant/:tenantId/settings' | '/settings' | '/tenant/:tenantId/users/:userId' | '/:userId' | '/content/articles/:id' | '/articles/:id' | '/:id';
export type POSTPaths = '/api/v1/tenant/:tenantId/users' | '/api/v1' | '/api/v1/tenant/:tenantId/billing/upgrade' | '/api/v1/users' | '/api/v1/billing/upgrade' | '/api/v1/upgrade' | '/api/v1/tenant/:tenantId/billing/cancel' | '/api/v1/cancel' | '/api/v1/content/articles' | '/api/v1/content/images' | '/api/v1/articles' | '/api/v1/images' | '/api/v1/tenant/:tenantId/analytics/export' | '/api/v1/export' | '/v1/tenant/:tenantId/users' | '/v1/tenant/:tenantId/billing/upgrade' | '/v1/users' | '/v1' | '/v1/billing/upgrade' | '/v1/upgrade' | '/v1/tenant/:tenantId/analytics/export' | '/v1/export' | '/v1/tenant/:tenantId/billing/cancel' | '/v1/cancel' | '/v1/content/articles' | '/v1/content/images' | '/v1/articles' | '/v1/images' | '/tenant/:tenantId/users' | '/tenant/:tenantId/billing/upgrade' | '/users' | '/' | '/billing/upgrade' | '/upgrade' | '/tenant/:tenantId/analytics/export' | '/export' | '/tenant/:tenantId/billing/cancel' | '/cancel' | '/content/articles' | '/content/images' | '/articles' | '/images';
export type DELETEPaths = '/api/v1/tenant/:tenantId/users/:userId' | '/api/v1/:userId' | '/api/v1/content/articles/:id' | '/api/v1/articles/:id' | '/api/v1/:id' | '/v1/tenant/:tenantId/users/:userId' | '/v1/:userId' | '/v1/content/articles/:id' | '/v1/articles/:id' | '/v1/:id' | '/tenant/:tenantId/users/:userId' | '/:userId' | '/content/articles/:id' | '/articles/:id' | '/:id';

// Union type of all valid paths
export type ValidPaths = '/health' | '/api/v2/*' | '/v2/*' | '/*' | '/docs' | '/docs/v1' | '/' | '/v1' | '/api/v1/tenant/:tenantId/users' | '/api/v1/tenant/:tenantId/users/:userId' | '/api/v1/tenant/:tenantId/users/:userId' | '/api/v1/tenant/:tenantId/users' | '/api/v1/tenant/:tenantId/users/:userId' | '/api/v1' | '/api/v1/:userId' | '/api/v1/:userId' | '/api/v1' | '/api/v1/:userId' | '/api/v1/tenant/:tenantId/info' | '/api/v1/tenant/:tenantId/settings' | '/api/v1/tenant/:tenantId/usage' | '/api/v1/tenant/:tenantId/analytics' | '/api/v1/tenant/:tenantId/analytics/advanced' | '/api/v1/tenant/:tenantId/analytics/export' | '/api/v1/tenant/:tenantId/billing/usage' | '/api/v1/tenant/:tenantId/billing/invoices' | '/api/v1/tenant/:tenantId/billing/upgrade' | '/api/v1/info' | '/api/v1/settings' | '/api/v1/usage' | '/api/v1/users' | '/api/v1/users/:userId' | '/api/v1/users' | '/api/v1/analytics' | '/api/v1/analytics/advanced' | '/api/v1/analytics/export' | '/api/v1/advanced' | '/api/v1/export' | '/api/v1/billing/usage' | '/api/v1/billing/invoices' | '/api/v1/billing/upgrade' | '/api/v1/invoices' | '/api/v1/upgrade' | '/api/v1/tenant/:tenantId/billing' | '/api/v1/tenant/:tenantId/billing/cancel' | '/api/v1/cancel' | '/api/v1/content/articles' | '/api/v1/content/articles/:id' | '/api/v1/content/articles' | '/api/v1/content/articles/:id' | '/api/v1/content/articles/:id' | '/api/v1/content/images' | '/api/v1/content/images' | '/api/v1/articles' | '/api/v1/articles/:id' | '/api/v1/articles' | '/api/v1/articles/:id' | '/api/v1/articles/:id' | '/api/v1/:id' | '/api/v1/:id' | '/api/v1/:id' | '/api/v1/images' | '/api/v1/images' | '/api/v1/tenant/:tenantId/analytics/enterprise' | '/api/v1/tenant/:tenantId/analytics/export' | '/api/v1/tenant/:tenantId/analytics/usage' | '/api/v1/enterprise' | '/api/v1/export' | '/v1/tenant/:tenantId/info' | '/v1/tenant/:tenantId/settings' | '/v1/tenant/:tenantId/usage' | '/v1/tenant/:tenantId/users' | '/v1/tenant/:tenantId/users/:userId' | '/v1/tenant/:tenantId/users' | '/v1/tenant/:tenantId/analytics' | '/v1/tenant/:tenantId/analytics/advanced' | '/v1/tenant/:tenantId/analytics/export' | '/v1/tenant/:tenantId/billing/usage' | '/v1/tenant/:tenantId/billing/invoices' | '/v1/tenant/:tenantId/billing/upgrade' | '/v1/info' | '/v1/settings' | '/v1/usage' | '/v1/users' | '/v1/users/:userId' | '/v1/users' | '/v1/:userId' | '/v1' | '/v1/analytics' | '/v1/analytics/advanced' | '/v1/analytics/export' | '/v1/advanced' | '/v1/export' | '/v1/billing/usage' | '/v1/billing/invoices' | '/v1/billing/upgrade' | '/v1/invoices' | '/v1/upgrade' | '/v1/tenant/:tenantId/users/:userId' | '/v1/tenant/:tenantId/users/:userId' | '/v1/:userId' | '/v1/:userId' | '/v1/tenant/:tenantId/analytics/enterprise' | '/v1/tenant/:tenantId/analytics/export' | '/v1/tenant/:tenantId/analytics/usage' | '/v1/enterprise' | '/v1/export' | '/v1/tenant/:tenantId/billing' | '/v1/tenant/:tenantId/billing/cancel' | '/v1/cancel' | '/v1/content/articles' | '/v1/content/articles/:id' | '/v1/content/articles' | '/v1/content/articles/:id' | '/v1/content/articles/:id' | '/v1/content/images' | '/v1/content/images' | '/v1/articles' | '/v1/articles/:id' | '/v1/articles' | '/v1/articles/:id' | '/v1/articles/:id' | '/v1/:id' | '/v1/:id' | '/v1/:id' | '/v1/images' | '/v1/images' | '/tenant/:tenantId/info' | '/tenant/:tenantId/settings' | '/tenant/:tenantId/usage' | '/tenant/:tenantId/users' | '/tenant/:tenantId/users/:userId' | '/tenant/:tenantId/users' | '/tenant/:tenantId/analytics' | '/tenant/:tenantId/analytics/advanced' | '/tenant/:tenantId/analytics/export' | '/tenant/:tenantId/billing/usage' | '/tenant/:tenantId/billing/invoices' | '/tenant/:tenantId/billing/upgrade' | '/info' | '/settings' | '/usage' | '/users' | '/users/:userId' | '/users' | '/:userId' | '/' | '/analytics' | '/analytics/advanced' | '/analytics/export' | '/advanced' | '/export' | '/billing/usage' | '/billing/invoices' | '/billing/upgrade' | '/invoices' | '/upgrade' | '/tenant/:tenantId/users/:userId' | '/tenant/:tenantId/users/:userId' | '/:userId' | '/:userId' | '/tenant/:tenantId/analytics/enterprise' | '/tenant/:tenantId/analytics/export' | '/tenant/:tenantId/analytics/usage' | '/enterprise' | '/export' | '/tenant/:tenantId/billing' | '/tenant/:tenantId/billing/cancel' | '/cancel' | '/content/articles' | '/content/articles/:id' | '/content/articles' | '/content/articles/:id' | '/content/articles/:id' | '/content/images' | '/content/images' | '/articles' | '/articles/:id' | '/articles' | '/articles/:id' | '/articles/:id' | '/:id' | '/:id' | '/:id' | '/images' | '/images';

export type PathParams<T extends ValidPaths> = T extends keyof PathParamMap 
  ? PathParamMap[T] 
  : never;

interface PathParamMap {
  '/api/v1/tenant/:tenantId/users': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/users/:userId': { tenantId: string | number; userId: string | number };
  '/api/v1/:userId': { userId: string | number };
  '/api/v1/tenant/:tenantId/info': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/settings': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/usage': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/analytics': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/analytics/advanced': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/analytics/export': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/billing/usage': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/billing/invoices': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/billing/upgrade': { tenantId: string | number };
  '/api/v1/users/:userId': { userId: string | number };
  '/api/v1/tenant/:tenantId/billing': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/billing/cancel': { tenantId: string | number };
  '/api/v1/content/articles/:id': { id: string | number };
  '/api/v1/articles/:id': { id: string | number };
  '/api/v1/:id': { id: string | number };
  '/api/v1/tenant/:tenantId/analytics/enterprise': { tenantId: string | number };
  '/api/v1/tenant/:tenantId/analytics/usage': { tenantId: string | number };
  '/v1/tenant/:tenantId/info': { tenantId: string | number };
  '/v1/tenant/:tenantId/settings': { tenantId: string | number };
  '/v1/tenant/:tenantId/usage': { tenantId: string | number };
  '/v1/tenant/:tenantId/users': { tenantId: string | number };
  '/v1/tenant/:tenantId/users/:userId': { tenantId: string | number; userId: string | number };
  '/v1/tenant/:tenantId/analytics': { tenantId: string | number };
  '/v1/tenant/:tenantId/analytics/advanced': { tenantId: string | number };
  '/v1/tenant/:tenantId/analytics/export': { tenantId: string | number };
  '/v1/tenant/:tenantId/billing/usage': { tenantId: string | number };
  '/v1/tenant/:tenantId/billing/invoices': { tenantId: string | number };
  '/v1/tenant/:tenantId/billing/upgrade': { tenantId: string | number };
  '/v1/users/:userId': { userId: string | number };
  '/v1/:userId': { userId: string | number };
  '/v1/tenant/:tenantId/analytics/enterprise': { tenantId: string | number };
  '/v1/tenant/:tenantId/analytics/usage': { tenantId: string | number };
  '/v1/tenant/:tenantId/billing': { tenantId: string | number };
  '/v1/tenant/:tenantId/billing/cancel': { tenantId: string | number };
  '/v1/content/articles/:id': { id: string | number };
  '/v1/articles/:id': { id: string | number };
  '/v1/:id': { id: string | number };
  '/tenant/:tenantId/info': { tenantId: string | number };
  '/tenant/:tenantId/settings': { tenantId: string | number };
  '/tenant/:tenantId/usage': { tenantId: string | number };
  '/tenant/:tenantId/users': { tenantId: string | number };
  '/tenant/:tenantId/users/:userId': { tenantId: string | number; userId: string | number };
  '/tenant/:tenantId/analytics': { tenantId: string | number };
  '/tenant/:tenantId/analytics/advanced': { tenantId: string | number };
  '/tenant/:tenantId/analytics/export': { tenantId: string | number };
  '/tenant/:tenantId/billing/usage': { tenantId: string | number };
  '/tenant/:tenantId/billing/invoices': { tenantId: string | number };
  '/tenant/:tenantId/billing/upgrade': { tenantId: string | number };
  '/users/:userId': { userId: string | number };
  '/:userId': { userId: string | number };
  '/tenant/:tenantId/analytics/enterprise': { tenantId: string | number };
  '/tenant/:tenantId/analytics/usage': { tenantId: string | number };
  '/tenant/:tenantId/billing': { tenantId: string | number };
  '/tenant/:tenantId/billing/cancel': { tenantId: string | number };
  '/content/articles/:id': { id: string | number };
  '/articles/:id': { id: string | number };
  '/:id': { id: string | number }
}

// Helper types to drive options/response from path
type ParamsOf<M extends keyof RouteDefinitions, P extends keyof RouteDefinitions[M]> =
  RouteDefinitions[M][P] extends { params: infer T } ? T : never;
type BodyOf<M extends keyof RouteDefinitions, P extends keyof RouteDefinitions[M]> =
  RouteDefinitions[M][P] extends { body: infer T } ? T : never;
export type ResponseFor<M extends keyof RouteDefinitions, P extends keyof RouteDefinitions[M]> =
  RouteDefinitions[M][P] extends { response: infer R } ? R : never;
type MaybeParams<M extends keyof RouteDefinitions, P extends keyof RouteDefinitions[M]> =
  [ParamsOf<M, P>] extends [never] ? {} : { params: ParamsOf<M, P> };
type MaybeBody<M extends keyof RouteDefinitions, P extends keyof RouteDefinitions[M]> =
  [BodyOf<M, P>] extends [never] ? {} : { body: BodyOf<M, P> };
export type OptionsFor<M extends keyof RouteDefinitions, P extends keyof RouteDefinitions[M]> =
  Omit<ClientRequestOptions, 'params' | 'body'> & MaybeParams<M, P> & MaybeBody<M, P>;
type HasParams<M extends keyof RouteDefinitions, P extends keyof RouteDefinitions[M]> =
  [ParamsOf<M, P>] extends [never] ? false : true;
type HasBody<M extends keyof RouteDefinitions, P extends keyof RouteDefinitions[M]> =
  [BodyOf<M, P>] extends [never] ? false : true;
type RequiresOptions<M extends keyof RouteDefinitions, P extends keyof RouteDefinitions[M]> =
  HasParams<M, P> extends true ? true : HasBody<M, P> extends true ? true : false;

// Generated client interface
export interface GeneratedApiClient {
  get<TPath extends GETPaths>(...args: RequiresOptions<'GET', TPath> extends true
    ? [path: TPath, options: OptionsFor<'GET', TPath>]
    : [path: TPath, options?: Omit<ClientRequestOptions, 'params' | 'body'>]
  ): Promise<ResponseFor<'GET', TPath>>;
  put<TPath extends PUTPaths>(...args: RequiresOptions<'PUT', TPath> extends true
    ? [path: TPath, options: OptionsFor<'PUT', TPath>]
    : [path: TPath, options?: Omit<ClientRequestOptions, 'params' | 'body'>]
  ): Promise<ResponseFor<'PUT', TPath>>;
  post<TPath extends POSTPaths>(...args: RequiresOptions<'POST', TPath> extends true
    ? [path: TPath, options: OptionsFor<'POST', TPath>]
    : [path: TPath, options?: Omit<ClientRequestOptions, 'params' | 'body'>]
  ): Promise<ResponseFor<'POST', TPath>>;
  delete<TPath extends DELETEPaths>(...args: RequiresOptions<'DELETE', TPath> extends true
    ? [path: TPath, options: OptionsFor<'DELETE', TPath>]
    : [path: TPath, options?: Omit<ClientRequestOptions, 'params' | 'body'>]
  ): Promise<ResponseFor<'DELETE', TPath>>;
}

// Create the typed client
function createTypedClient(options: CreateClientOptions = {}): GeneratedApiClient {
  const client = createClient({ baseUrl: 'http://localhost:8200', ...options });

  const get: GeneratedApiClient["get"] = ((...args: any[]) => {
      const [path, options] = args as [any, any];
      switch (path) {
      case '/health': return client.get(path, options) as Promise<ResponseFor<'GET', '/health'>>;
      case '/api/v2/*': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v2/*'>>;
      case '/v2/*': return client.get(path, options) as Promise<ResponseFor<'GET', '/v2/*'>>;
      case '/*': return client.get(path, options) as Promise<ResponseFor<'GET', '/*'>>;
      case '/docs': return client.get(path, options) as Promise<ResponseFor<'GET', '/docs'>>;
      case '/docs/v1': return client.get(path, options) as Promise<ResponseFor<'GET', '/docs/v1'>>;
      case '/': return client.get(path, options) as Promise<ResponseFor<'GET', '/'>>;
      case '/v1': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1'>>;
      case '/api/v1/tenant/:tenantId/users': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/users'>>;
      case '/api/v1/tenant/:tenantId/users/:userId': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/users/:userId'>>;
      case '/api/v1': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1'>>;
      case '/api/v1/:userId': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/:userId'>>;
      case '/api/v1/tenant/:tenantId/info': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/info'>>;
      case '/api/v1/tenant/:tenantId/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/usage'>>;
      case '/api/v1/tenant/:tenantId/analytics': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/analytics'>>;
      case '/api/v1/tenant/:tenantId/analytics/advanced': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/analytics/advanced'>>;
      case '/api/v1/tenant/:tenantId/analytics/export': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/analytics/export'>>;
      case '/api/v1/tenant/:tenantId/billing/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/billing/usage'>>;
      case '/api/v1/tenant/:tenantId/billing/invoices': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/billing/invoices'>>;
      case '/api/v1/info': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/info'>>;
      case '/api/v1/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/usage'>>;
      case '/api/v1/users': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/users'>>;
      case '/api/v1/users/:userId': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/users/:userId'>>;
      case '/api/v1/analytics': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/analytics'>>;
      case '/api/v1/analytics/advanced': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/analytics/advanced'>>;
      case '/api/v1/analytics/export': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/analytics/export'>>;
      case '/api/v1/advanced': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/advanced'>>;
      case '/api/v1/export': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/export'>>;
      case '/api/v1/billing/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/billing/usage'>>;
      case '/api/v1/billing/invoices': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/billing/invoices'>>;
      case '/api/v1/invoices': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/invoices'>>;
      case '/api/v1/tenant/:tenantId/billing': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/billing'>>;
      case '/api/v1/content/articles': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/content/articles'>>;
      case '/api/v1/content/articles/:id': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/content/articles/:id'>>;
      case '/api/v1/content/images': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/content/images'>>;
      case '/api/v1/articles': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/articles'>>;
      case '/api/v1/articles/:id': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/articles/:id'>>;
      case '/api/v1/:id': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/:id'>>;
      case '/api/v1/images': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/images'>>;
      case '/api/v1/tenant/:tenantId/analytics/enterprise': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/analytics/enterprise'>>;
      case '/api/v1/tenant/:tenantId/analytics/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/tenant/:tenantId/analytics/usage'>>;
      case '/api/v1/enterprise': return client.get(path, options) as Promise<ResponseFor<'GET', '/api/v1/enterprise'>>;
      case '/v1/tenant/:tenantId/info': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/info'>>;
      case '/v1/tenant/:tenantId/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/usage'>>;
      case '/v1/tenant/:tenantId/users': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/users'>>;
      case '/v1/tenant/:tenantId/users/:userId': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/users/:userId'>>;
      case '/v1/tenant/:tenantId/analytics': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/analytics'>>;
      case '/v1/tenant/:tenantId/analytics/advanced': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/analytics/advanced'>>;
      case '/v1/tenant/:tenantId/analytics/export': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/analytics/export'>>;
      case '/v1/tenant/:tenantId/billing/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/billing/usage'>>;
      case '/v1/tenant/:tenantId/billing/invoices': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/billing/invoices'>>;
      case '/v1/info': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/info'>>;
      case '/v1/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/usage'>>;
      case '/v1/users': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/users'>>;
      case '/v1/users/:userId': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/users/:userId'>>;
      case '/v1/:userId': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/:userId'>>;
      case '/v1/analytics': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/analytics'>>;
      case '/v1/analytics/advanced': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/analytics/advanced'>>;
      case '/v1/analytics/export': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/analytics/export'>>;
      case '/v1/advanced': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/advanced'>>;
      case '/v1/export': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/export'>>;
      case '/v1/billing/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/billing/usage'>>;
      case '/v1/billing/invoices': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/billing/invoices'>>;
      case '/v1/invoices': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/invoices'>>;
      case '/v1/tenant/:tenantId/analytics/enterprise': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/analytics/enterprise'>>;
      case '/v1/tenant/:tenantId/analytics/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/analytics/usage'>>;
      case '/v1/enterprise': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/enterprise'>>;
      case '/v1/tenant/:tenantId/billing': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/tenant/:tenantId/billing'>>;
      case '/v1/content/articles': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/content/articles'>>;
      case '/v1/content/articles/:id': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/content/articles/:id'>>;
      case '/v1/content/images': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/content/images'>>;
      case '/v1/articles': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/articles'>>;
      case '/v1/articles/:id': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/articles/:id'>>;
      case '/v1/:id': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/:id'>>;
      case '/v1/images': return client.get(path, options) as Promise<ResponseFor<'GET', '/v1/images'>>;
      case '/tenant/:tenantId/info': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/info'>>;
      case '/tenant/:tenantId/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/usage'>>;
      case '/tenant/:tenantId/users': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/users'>>;
      case '/tenant/:tenantId/users/:userId': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/users/:userId'>>;
      case '/tenant/:tenantId/analytics': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/analytics'>>;
      case '/tenant/:tenantId/analytics/advanced': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/analytics/advanced'>>;
      case '/tenant/:tenantId/analytics/export': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/analytics/export'>>;
      case '/tenant/:tenantId/billing/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/billing/usage'>>;
      case '/tenant/:tenantId/billing/invoices': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/billing/invoices'>>;
      case '/info': return client.get(path, options) as Promise<ResponseFor<'GET', '/info'>>;
      case '/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/usage'>>;
      case '/users': return client.get(path, options) as Promise<ResponseFor<'GET', '/users'>>;
      case '/users/:userId': return client.get(path, options) as Promise<ResponseFor<'GET', '/users/:userId'>>;
      case '/:userId': return client.get(path, options) as Promise<ResponseFor<'GET', '/:userId'>>;
      case '/analytics': return client.get(path, options) as Promise<ResponseFor<'GET', '/analytics'>>;
      case '/analytics/advanced': return client.get(path, options) as Promise<ResponseFor<'GET', '/analytics/advanced'>>;
      case '/analytics/export': return client.get(path, options) as Promise<ResponseFor<'GET', '/analytics/export'>>;
      case '/advanced': return client.get(path, options) as Promise<ResponseFor<'GET', '/advanced'>>;
      case '/export': return client.get(path, options) as Promise<ResponseFor<'GET', '/export'>>;
      case '/billing/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/billing/usage'>>;
      case '/billing/invoices': return client.get(path, options) as Promise<ResponseFor<'GET', '/billing/invoices'>>;
      case '/invoices': return client.get(path, options) as Promise<ResponseFor<'GET', '/invoices'>>;
      case '/tenant/:tenantId/analytics/enterprise': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/analytics/enterprise'>>;
      case '/tenant/:tenantId/analytics/usage': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/analytics/usage'>>;
      case '/enterprise': return client.get(path, options) as Promise<ResponseFor<'GET', '/enterprise'>>;
      case '/tenant/:tenantId/billing': return client.get(path, options) as Promise<ResponseFor<'GET', '/tenant/:tenantId/billing'>>;
      case '/content/articles': return client.get(path, options) as Promise<ResponseFor<'GET', '/content/articles'>>;
      case '/content/articles/:id': return client.get(path, options) as Promise<ResponseFor<'GET', '/content/articles/:id'>>;
      case '/content/images': return client.get(path, options) as Promise<ResponseFor<'GET', '/content/images'>>;
      case '/articles': return client.get(path, options) as Promise<ResponseFor<'GET', '/articles'>>;
      case '/articles/:id': return client.get(path, options) as Promise<ResponseFor<'GET', '/articles/:id'>>;
      case '/:id': return client.get(path, options) as Promise<ResponseFor<'GET', '/:id'>>;
      case '/images': return client.get(path, options) as Promise<ResponseFor<'GET', '/images'>>;
        default: throw new Error(`Invalid path for GET: ${path}`);
      }
    }) as any;

  const put: GeneratedApiClient["put"] = ((...args: any[]) => {
      const [path, options] = args as [any, any];
      switch (path) {
      case '/api/v1/tenant/:tenantId/users/:userId': return client.put(path, options) as Promise<ResponseFor<'PUT', '/api/v1/tenant/:tenantId/users/:userId'>>;
      case '/api/v1/:userId': return client.put(path, options) as Promise<ResponseFor<'PUT', '/api/v1/:userId'>>;
      case '/api/v1/tenant/:tenantId/settings': return client.put(path, options) as Promise<ResponseFor<'PUT', '/api/v1/tenant/:tenantId/settings'>>;
      case '/api/v1/settings': return client.put(path, options) as Promise<ResponseFor<'PUT', '/api/v1/settings'>>;
      case '/api/v1/content/articles/:id': return client.put(path, options) as Promise<ResponseFor<'PUT', '/api/v1/content/articles/:id'>>;
      case '/api/v1/articles/:id': return client.put(path, options) as Promise<ResponseFor<'PUT', '/api/v1/articles/:id'>>;
      case '/api/v1/:id': return client.put(path, options) as Promise<ResponseFor<'PUT', '/api/v1/:id'>>;
      case '/v1/tenant/:tenantId/settings': return client.put(path, options) as Promise<ResponseFor<'PUT', '/v1/tenant/:tenantId/settings'>>;
      case '/v1/settings': return client.put(path, options) as Promise<ResponseFor<'PUT', '/v1/settings'>>;
      case '/v1/tenant/:tenantId/users/:userId': return client.put(path, options) as Promise<ResponseFor<'PUT', '/v1/tenant/:tenantId/users/:userId'>>;
      case '/v1/:userId': return client.put(path, options) as Promise<ResponseFor<'PUT', '/v1/:userId'>>;
      case '/v1/content/articles/:id': return client.put(path, options) as Promise<ResponseFor<'PUT', '/v1/content/articles/:id'>>;
      case '/v1/articles/:id': return client.put(path, options) as Promise<ResponseFor<'PUT', '/v1/articles/:id'>>;
      case '/v1/:id': return client.put(path, options) as Promise<ResponseFor<'PUT', '/v1/:id'>>;
      case '/tenant/:tenantId/settings': return client.put(path, options) as Promise<ResponseFor<'PUT', '/tenant/:tenantId/settings'>>;
      case '/settings': return client.put(path, options) as Promise<ResponseFor<'PUT', '/settings'>>;
      case '/tenant/:tenantId/users/:userId': return client.put(path, options) as Promise<ResponseFor<'PUT', '/tenant/:tenantId/users/:userId'>>;
      case '/:userId': return client.put(path, options) as Promise<ResponseFor<'PUT', '/:userId'>>;
      case '/content/articles/:id': return client.put(path, options) as Promise<ResponseFor<'PUT', '/content/articles/:id'>>;
      case '/articles/:id': return client.put(path, options) as Promise<ResponseFor<'PUT', '/articles/:id'>>;
      case '/:id': return client.put(path, options) as Promise<ResponseFor<'PUT', '/:id'>>;
        default: throw new Error(`Invalid path for PUT: ${path}`);
      }
    }) as any;

  const post: GeneratedApiClient["post"] = ((...args: any[]) => {
      const [path, options] = args as [any, any];
      switch (path) {
      case '/api/v1/tenant/:tenantId/users': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/tenant/:tenantId/users'>>;
      case '/api/v1': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1'>>;
      case '/api/v1/tenant/:tenantId/billing/upgrade': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/tenant/:tenantId/billing/upgrade'>>;
      case '/api/v1/users': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/users'>>;
      case '/api/v1/billing/upgrade': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/billing/upgrade'>>;
      case '/api/v1/upgrade': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/upgrade'>>;
      case '/api/v1/tenant/:tenantId/billing/cancel': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/tenant/:tenantId/billing/cancel'>>;
      case '/api/v1/cancel': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/cancel'>>;
      case '/api/v1/content/articles': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/content/articles'>>;
      case '/api/v1/content/images': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/content/images'>>;
      case '/api/v1/articles': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/articles'>>;
      case '/api/v1/images': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/images'>>;
      case '/api/v1/tenant/:tenantId/analytics/export': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/tenant/:tenantId/analytics/export'>>;
      case '/api/v1/export': return client.post(path, options) as Promise<ResponseFor<'POST', '/api/v1/export'>>;
      case '/v1/tenant/:tenantId/users': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/tenant/:tenantId/users'>>;
      case '/v1/tenant/:tenantId/billing/upgrade': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/tenant/:tenantId/billing/upgrade'>>;
      case '/v1/users': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/users'>>;
      case '/v1': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1'>>;
      case '/v1/billing/upgrade': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/billing/upgrade'>>;
      case '/v1/upgrade': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/upgrade'>>;
      case '/v1/tenant/:tenantId/analytics/export': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/tenant/:tenantId/analytics/export'>>;
      case '/v1/export': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/export'>>;
      case '/v1/tenant/:tenantId/billing/cancel': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/tenant/:tenantId/billing/cancel'>>;
      case '/v1/cancel': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/cancel'>>;
      case '/v1/content/articles': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/content/articles'>>;
      case '/v1/content/images': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/content/images'>>;
      case '/v1/articles': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/articles'>>;
      case '/v1/images': return client.post(path, options) as Promise<ResponseFor<'POST', '/v1/images'>>;
      case '/tenant/:tenantId/users': return client.post(path, options) as Promise<ResponseFor<'POST', '/tenant/:tenantId/users'>>;
      case '/tenant/:tenantId/billing/upgrade': return client.post(path, options) as Promise<ResponseFor<'POST', '/tenant/:tenantId/billing/upgrade'>>;
      case '/users': return client.post(path, options) as Promise<ResponseFor<'POST', '/users'>>;
      case '/': return client.post(path, options) as Promise<ResponseFor<'POST', '/'>>;
      case '/billing/upgrade': return client.post(path, options) as Promise<ResponseFor<'POST', '/billing/upgrade'>>;
      case '/upgrade': return client.post(path, options) as Promise<ResponseFor<'POST', '/upgrade'>>;
      case '/tenant/:tenantId/analytics/export': return client.post(path, options) as Promise<ResponseFor<'POST', '/tenant/:tenantId/analytics/export'>>;
      case '/export': return client.post(path, options) as Promise<ResponseFor<'POST', '/export'>>;
      case '/tenant/:tenantId/billing/cancel': return client.post(path, options) as Promise<ResponseFor<'POST', '/tenant/:tenantId/billing/cancel'>>;
      case '/cancel': return client.post(path, options) as Promise<ResponseFor<'POST', '/cancel'>>;
      case '/content/articles': return client.post(path, options) as Promise<ResponseFor<'POST', '/content/articles'>>;
      case '/content/images': return client.post(path, options) as Promise<ResponseFor<'POST', '/content/images'>>;
      case '/articles': return client.post(path, options) as Promise<ResponseFor<'POST', '/articles'>>;
      case '/images': return client.post(path, options) as Promise<ResponseFor<'POST', '/images'>>;
        default: throw new Error(`Invalid path for POST: ${path}`);
      }
    }) as any;

  const del: GeneratedApiClient["delete"] = ((...args: any[]) => {
      const [path, options] = args as [any, any];
      switch (path) {
      case '/api/v1/tenant/:tenantId/users/:userId': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/api/v1/tenant/:tenantId/users/:userId'>>;
      case '/api/v1/:userId': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/api/v1/:userId'>>;
      case '/api/v1/content/articles/:id': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/api/v1/content/articles/:id'>>;
      case '/api/v1/articles/:id': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/api/v1/articles/:id'>>;
      case '/api/v1/:id': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/api/v1/:id'>>;
      case '/v1/tenant/:tenantId/users/:userId': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/v1/tenant/:tenantId/users/:userId'>>;
      case '/v1/:userId': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/v1/:userId'>>;
      case '/v1/content/articles/:id': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/v1/content/articles/:id'>>;
      case '/v1/articles/:id': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/v1/articles/:id'>>;
      case '/v1/:id': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/v1/:id'>>;
      case '/tenant/:tenantId/users/:userId': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/tenant/:tenantId/users/:userId'>>;
      case '/:userId': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/:userId'>>;
      case '/content/articles/:id': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/content/articles/:id'>>;
      case '/articles/:id': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/articles/:id'>>;
      case '/:id': return client.delete(path, options) as Promise<ResponseFor<'DELETE', '/:id'>>;
        default: throw new Error(`Invalid path for DELETE: ${path}`);
      }
    }) as any;

  return {
    get,
    put,
    post,
    delete: del
  } as GeneratedApiClient;
}

// Export the client instance
export const api = createTypedClient();

// Export the client factory for custom configuration
export { createTypedClient as createApi };
